#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct S_packed_vec3 {
  /* 0x0000 */ packed_half3 v;
  /* 0x0006 */ tint_array<int8_t, 2> tint_pad;
};

struct tint_module_vars_struct {
  device S_packed_vec3* U;
};

kernel void f(device S_packed_vec3* U [[buffer(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.U=U};
  (*tint_module_vars.U).v = packed_half3(half3(1.0h, 2.0h, 3.0h));
  (*tint_module_vars.U).v.x = 1.0h;
  (*tint_module_vars.U).v.y = 2.0h;
  (*tint_module_vars.U).v.z = 3.0h;
}
