//
// main
//
#include <metal_stdlib>
using namespace metal;

struct tint_GammaTransferParams {
  /* 0x0000 */ float G;
  /* 0x0004 */ float A;
  /* 0x0008 */ float B;
  /* 0x000c */ float C;
  /* 0x0010 */ float D;
  /* 0x0014 */ float E;
  /* 0x0018 */ float F;
  /* 0x001c */ uint padding;
};

struct tint_ExternalTextureParams {
  uint numPlanes;
  uint doYuvToRgbConversionOnly;
  float3x4 yuvToRgbConversionMatrix;
  tint_GammaTransferParams gammaDecodeParams;
  tint_GammaTransferParams gammaEncodeParams;
  float3x3 gamutConversionMatrix;
  float3x2 sampleTransform;
  float3x2 loadTransform;
  float2 samplePlane0RectMin;
  float2 samplePlane0RectMax;
  float2 samplePlane1RectMin;
  float2 samplePlane1RectMax;
  uint2 apparentSize;
  float2 plane1CoordFactor;
};

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_packed_vec3_f32_array_element {
  /* 0x0000 */ packed_float3 packed;
  /* 0x000c */ tint_array<int8_t, 4> tint_pad_1;
};

struct tint_ExternalTextureParams_packed_vec3 {
  /* 0x0000 */ uint numPlanes;
  /* 0x0004 */ uint doYuvToRgbConversionOnly;
  /* 0x0008 */ tint_array<int8_t, 8> tint_pad;
  /* 0x0010 */ float3x4 yuvToRgbConversionMatrix;
  /* 0x0040 */ tint_GammaTransferParams gammaDecodeParams;
  /* 0x0060 */ tint_GammaTransferParams gammaEncodeParams;
  /* 0x0080 */ tint_array<tint_packed_vec3_f32_array_element, 3> gamutConversionMatrix;
  /* 0x00b0 */ float3x2 sampleTransform;
  /* 0x00c8 */ float3x2 loadTransform;
  /* 0x00e0 */ float2 samplePlane0RectMin;
  /* 0x00e8 */ float2 samplePlane0RectMax;
  /* 0x00f0 */ float2 samplePlane1RectMin;
  /* 0x00f8 */ float2 samplePlane1RectMax;
  /* 0x0100 */ uint2 apparentSize;
  /* 0x0108 */ float2 plane1CoordFactor;
};

struct tint_module_vars_struct {
  texture2d<float, access::sample> randomTexture_plane0;
  texture2d<float, access::sample> randomTexture_plane1;
  const constant tint_ExternalTextureParams_packed_vec3* randomTexture_params;
  texture2d<float, access::sample> depthTexture;
};

tint_ExternalTextureParams tint_load_struct_packed_vec3(const constant tint_ExternalTextureParams_packed_vec3* const from) {
  uint const v = (*from).numPlanes;
  uint const v_1 = (*from).doYuvToRgbConversionOnly;
  float3x4 const v_2 = (*from).yuvToRgbConversionMatrix;
  tint_GammaTransferParams const v_3 = (*from).gammaDecodeParams;
  tint_GammaTransferParams const v_4 = (*from).gammaEncodeParams;
  tint_array<tint_packed_vec3_f32_array_element, 3> const v_5 = (*from).gamutConversionMatrix;
  float3x3 const v_6 = float3x3(float3(v_5[0u].packed), float3(v_5[1u].packed), float3(v_5[2u].packed));
  return tint_ExternalTextureParams{.numPlanes=v, .doYuvToRgbConversionOnly=v_1, .yuvToRgbConversionMatrix=v_2, .gammaDecodeParams=v_3, .gammaEncodeParams=v_4, .gamutConversionMatrix=v_6, .sampleTransform=(*from).sampleTransform, .loadTransform=(*from).loadTransform, .samplePlane0RectMin=(*from).samplePlane0RectMin, .samplePlane0RectMax=(*from).samplePlane0RectMax, .samplePlane1RectMin=(*from).samplePlane1RectMin, .samplePlane1RectMax=(*from).samplePlane1RectMax, .apparentSize=(*from).apparentSize, .plane1CoordFactor=(*from).plane1CoordFactor};
}

kernel void v_7(texture2d<float, access::sample> randomTexture_plane0 [[texture(0)]], texture2d<float, access::sample> randomTexture_plane1 [[texture(2)]], const constant tint_ExternalTextureParams_packed_vec3* randomTexture_params [[buffer(3)]], texture2d<float, access::sample> depthTexture [[texture(1)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.randomTexture_plane0=randomTexture_plane0, .randomTexture_plane1=randomTexture_plane1, .randomTexture_params=randomTexture_params, .depthTexture=depthTexture};
  tint_load_struct_packed_vec3(tint_module_vars.randomTexture_params);
}
//
// main2
//
#include <metal_stdlib>
using namespace metal;

struct tint_module_vars_struct {
  sampler Sampler;
  texture2d<float, access::sample> depthTexture;
};

kernel void main2(sampler Sampler [[sampler(0)]], texture2d<float, access::sample> depthTexture [[texture(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.Sampler=Sampler, .depthTexture=depthTexture};
}
