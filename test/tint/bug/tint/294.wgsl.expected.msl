#include <metal_stdlib>
using namespace metal;

struct Light {
  float3 position;
  float3 colour;
};

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct Light_packed_vec3 {
  /* 0x0000 */ packed_float3 position;
  /* 0x000c */ tint_array<int8_t, 4> tint_pad;
  /* 0x0010 */ packed_float3 colour;
  /* 0x001c */ tint_array<int8_t, 4> tint_pad_1;
};

struct Lights_packed_vec3 {
  /* 0x0000 */ tint_array<Light_packed_vec3, 1> light;
};

struct tint_module_vars_struct {
  const device Lights_packed_vec3* lights;
  const constant tint_array<uint4, 1>* tint_storage_buffer_sizes;
};

struct tint_array_lengths_struct {
  uint tint_array_length_0_0;
};

Light tint_load_struct_packed_vec3(const device Light_packed_vec3* const from) {
  return Light{.position=float3((*from).position), .colour=float3((*from).colour)};
}

kernel void v(const device Lights_packed_vec3* lights [[buffer(0)]], const constant tint_array<uint4, 1>* tint_storage_buffer_sizes [[buffer(30)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.lights=lights, .tint_storage_buffer_sizes=tint_storage_buffer_sizes};
  uint const v_1 = (tint_array_lengths_struct{.tint_array_length_0_0=(((*tint_module_vars.tint_storage_buffer_sizes)[0u].x - 0u) / 32u)}.tint_array_length_0_0 - 1u);
  tint_load_struct_packed_vec3((&(*tint_module_vars.lights).light[min(uint(0), v_1)]));
}
