#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct FSUniformData {
  /* 0x0000 */ tint_array<float4, 7> k;
  /* 0x0070 */ int2 size;
  /* 0x0078 */ tint_array<int8_t, 8> tint_pad;
};

struct FSUniforms {
  /* 0x0000 */ tint_array<FSUniformData, 1> fsUniformData;
};

struct tint_module_vars_struct {
  thread uint* idx;
  const device FSUniforms* _storage;
  const constant tint_array<uint4, 1>* tint_storage_buffer_sizes;
};

struct tint_array_lengths_struct {
  uint tint_array_length_0_0;
};

kernel void v(const device FSUniforms* _storage [[buffer(0)]], const constant tint_array<uint4, 1>* tint_storage_buffer_sizes [[buffer(30)]]) {
  thread uint idx = 0u;
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.idx=(&idx), ._storage=_storage, .tint_storage_buffer_sizes=tint_storage_buffer_sizes};
  tint_array_lengths_struct const v_1 = tint_array_lengths_struct{.tint_array_length_0_0=(((*tint_module_vars.tint_storage_buffer_sizes)[0u].x - 0u) / 128u)};
  int2 v_2 = int2(0);
  {
    uint2 tint_loop_idx = uint2(4294967295u);
    while(true) {
      if (all((tint_loop_idx == uint2(0u)))) {
        break;
      }
      if ((v_2.y >= (*tint_module_vars._storage).fsUniformData[min((*tint_module_vars.idx), (v_1.tint_array_length_0_0 - 1u))].size.y)) {
        break;
      }
      {
        uint const tint_low_inc = (tint_loop_idx.x - 1u);
        tint_loop_idx.x = tint_low_inc;
        uint const tint_carry = uint((tint_low_inc == 4294967295u));
        tint_loop_idx.y = (tint_loop_idx.y - tint_carry);
      }
      continue;
    }
  }
}
