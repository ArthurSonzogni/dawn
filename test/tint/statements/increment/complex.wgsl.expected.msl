#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct S {
  /* 0x0000 */ tint_array<int4, 4> a;
};

struct tint_module_vars_struct {
  device tint_array<S, 1>* tint_member;
  thread uint* v;
  const constant tint_array<uint4, 1>* tint_storage_buffer_sizes;
};

struct tint_array_lengths_struct {
  uint tint_array_length_0_0;
};

int idx1(tint_module_vars_struct tint_module_vars) {
  (*tint_module_vars.v) = ((*tint_module_vars.v) + 1u);
  return 1;
}

int idx2(tint_module_vars_struct tint_module_vars) {
  (*tint_module_vars.v) = ((*tint_module_vars.v) + 1u);
  return 2;
}

int idx3(tint_module_vars_struct tint_module_vars) {
  (*tint_module_vars.v) = ((*tint_module_vars.v) + 1u);
  return 3;
}

int idx4(tint_module_vars_struct tint_module_vars) {
  (*tint_module_vars.v) = ((*tint_module_vars.v) + 1u);
  return 4;
}

int idx5(tint_module_vars_struct tint_module_vars) {
  (*tint_module_vars.v) = ((*tint_module_vars.v) + 1u);
  return 0;
}

int idx6(tint_module_vars_struct tint_module_vars) {
  (*tint_module_vars.v) = ((*tint_module_vars.v) + 1u);
  return 2;
}

kernel void v_1(device tint_array<S, 1>* v_2 [[buffer(0)]], const constant tint_array<uint4, 1>* tint_storage_buffer_sizes [[buffer(30)]]) {
  thread uint v = 0u;
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.tint_member=v_2, .v=(&v), .tint_storage_buffer_sizes=tint_storage_buffer_sizes};
  tint_array_lengths_struct const v_3 = tint_array_lengths_struct{.tint_array_length_0_0=((*tint_module_vars.tint_storage_buffer_sizes)[0u].x / 64u)};
  {
    uint2 tint_loop_idx = uint2(4294967295u);
    int const v_4 = idx1(tint_module_vars);
    int const v_5 = idx2(tint_module_vars);
    uint const v_6 = min(uint(v_4), (v_3.tint_array_length_0_0 - 1u));
    device int4* const v_7 = (&(*tint_module_vars.tint_member)[v_6].a[min(uint(v_5), 3u)]);
    int const v_8 = idx3(tint_module_vars);
    int const v_9 = as_type<int>((as_type<uint>((*v_7)[min(uint(v_8), 3u)]) + as_type<uint>(1)));
    (*v_7)[min(uint(v_8), 3u)] = v_9;
    while(true) {
      if (all((tint_loop_idx == uint2(0u)))) {
        break;
      }
      if (((*tint_module_vars.v) < 10u)) {
      } else {
        break;
      }
      {
        uint const tint_low_inc = (tint_loop_idx.x - 1u);
        tint_loop_idx.x = tint_low_inc;
        uint const tint_carry = uint((tint_low_inc == 4294967295u));
        tint_loop_idx.y = (tint_loop_idx.y - tint_carry);
        int const v_10 = idx4(tint_module_vars);
        int const v_11 = idx5(tint_module_vars);
        uint const v_12 = min(uint(v_10), (v_3.tint_array_length_0_0 - 1u));
        device int4* const v_13 = (&(*tint_module_vars.tint_member)[v_12].a[min(uint(v_11), 3u)]);
        int const v_14 = idx6(tint_module_vars);
        int const v_15 = as_type<int>((as_type<uint>((*v_13)[min(uint(v_14), 3u)]) + as_type<uint>(1)));
        (*v_13)[min(uint(v_14), 3u)] = v_15;
      }
      continue;
    }
  }
}
