; SPIR-V
; Version: 1.3
; Generator: Google Tint Compiler; 1
; Bound: 77
; Schema: 0
               OpCapability Shader
               OpCapability Float16
               OpCapability StorageBuffer16BitAccess
         %33 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %f "f"
               OpExecutionMode %f LocalSize 1 1 1
               OpMemberName %u_block_tint_explicit_layout 0 "inner"
               OpName %u_block_tint_explicit_layout "u_block_tint_explicit_layout"
               OpName %f "f"
               OpName %t "t"
               OpName %l "l"
               OpName %a "a"
               OpName %start_byte_offset "start_byte_offset"
               OpDecorate %_arr_v4uint_uint_32 ArrayStride 16
               OpMemberDecorate %u_block_tint_explicit_layout 0 Offset 0
               OpDecorate %u_block_tint_explicit_layout Block
               OpDecorate %1 DescriptorSet 0
               OpDecorate %1 Binding 0
               OpDecorate %1 NonWritable
       %uint = OpTypeInt 32 0
     %v4uint = OpTypeVector %uint 4
    %uint_32 = OpConstant %uint 32
%_arr_v4uint_uint_32 = OpTypeArray %v4uint %uint_32
%u_block_tint_explicit_layout = OpTypeStruct %_arr_v4uint_uint_32
%_ptr_Uniform_u_block_tint_explicit_layout = OpTypePointer Uniform %u_block_tint_explicit_layout
          %1 = OpVariable %_ptr_Uniform_u_block_tint_explicit_layout Uniform
       %void = OpTypeVoid
         %10 = OpTypeFunction %void
       %half = OpTypeFloat 16
     %v3half = OpTypeVector %half 3
 %mat2v3half = OpTypeMatrix %v3half 2
   %uint_264 = OpConstant %uint 264
     %v2half = OpTypeVector %half 2
 %mat3v2half = OpTypeMatrix %v2half 3
%_ptr_Uniform_v4uint = OpTypePointer Uniform %v4uint
     %uint_0 = OpConstant %uint 0
     %uint_1 = OpConstant %uint 1
     %v2uint = OpTypeVector %uint 2
     %v4half = OpTypeVector %half 4
         %43 = OpTypeFunction %mat2v3half %uint
    %uint_16 = OpConstant %uint 16
    %uint_15 = OpConstant %uint 15
     %uint_2 = OpConstant %uint 2
       %bool = OpTypeBool
     %v2bool = OpTypeVector %bool 2
     %uint_8 = OpConstant %uint 8
          %f = OpFunction %void None %10
         %11 = OpLabel
         %12 = OpFunctionCall %mat2v3half %16 %uint_264
          %t = OpTranspose %mat3v2half %12
         %21 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %uint_1
         %25 = OpLoad %v4uint %21 None
         %26 = OpVectorShuffle %v2uint %25 %25 0 1
         %29 = OpBitcast %v4half %26
         %30 = OpVectorShuffle %v3half %29 %29 0 1 2
         %31 = OpVectorShuffle %v3half %30 %30 2 0 1
          %l = OpExtInst %half %33 Length %31
         %34 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %uint_1
         %35 = OpLoad %v4uint %34 None
         %36 = OpVectorShuffle %v2uint %35 %35 0 1
         %37 = OpBitcast %v4half %36
         %38 = OpVectorShuffle %v3half %37 %37 0 1 2
         %39 = OpVectorShuffle %v3half %38 %38 2 0 1
         %40 = OpCompositeExtract %half %39 0
          %a = OpExtInst %half %33 FAbs %40
               OpReturn
               OpFunctionEnd
         %16 = OpFunction %mat2v3half None %43
%start_byte_offset = OpFunctionParameter %uint
         %44 = OpLabel
         %45 = OpUDiv %uint %start_byte_offset %uint_16
         %47 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %45
         %48 = OpBitwiseAnd %uint %start_byte_offset %uint_15
         %50 = OpShiftRightLogical %uint %48 %uint_2
         %52 = OpLoad %v4uint %47 None
         %53 = OpVectorShuffle %v2uint %52 %52 2 3
         %54 = OpVectorShuffle %v2uint %52 %52 0 1
         %55 = OpIEqual %bool %50 %uint_2
         %58 = OpCompositeConstruct %v2bool %55 %55
         %59 = OpSelect %v2uint %58 %53 %54
         %60 = OpBitcast %v4half %59
         %61 = OpVectorShuffle %v3half %60 %60 0 1 2
         %62 = OpIAdd %uint %uint_8 %start_byte_offset
         %64 = OpUDiv %uint %62 %uint_16
         %65 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %64
         %66 = OpBitwiseAnd %uint %62 %uint_15
         %67 = OpShiftRightLogical %uint %66 %uint_2
         %68 = OpLoad %v4uint %65 None
         %69 = OpVectorShuffle %v2uint %68 %68 2 3
         %70 = OpVectorShuffle %v2uint %68 %68 0 1
         %71 = OpIEqual %bool %67 %uint_2
         %72 = OpCompositeConstruct %v2bool %71 %71
         %73 = OpSelect %v2uint %72 %69 %70
         %74 = OpBitcast %v4half %73
         %75 = OpVectorShuffle %v3half %74 %74 0 1 2
         %76 = OpCompositeConstruct %mat2v3half %61 %75
               OpReturnValue %76
               OpFunctionEnd
