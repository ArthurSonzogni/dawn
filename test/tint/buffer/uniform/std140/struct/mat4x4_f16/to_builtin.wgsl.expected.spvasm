; SPIR-V
; Version: 1.3
; Generator: Google Tint Compiler; 1
; Bound: 95
; Schema: 0
               OpCapability Shader
               OpCapability Float16
               OpCapability StorageBuffer16BitAccess
         %29 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %f "f"
               OpExecutionMode %f LocalSize 1 1 1
               OpMemberName %u_block_tint_explicit_layout 0 "inner"
               OpName %u_block_tint_explicit_layout "u_block_tint_explicit_layout"
               OpName %f "f"
               OpName %t "t"
               OpName %l "l"
               OpName %a "a"
               OpName %start_byte_offset "start_byte_offset"
               OpDecorate %_arr_v4uint_uint_32 ArrayStride 16
               OpMemberDecorate %u_block_tint_explicit_layout 0 Offset 0
               OpDecorate %u_block_tint_explicit_layout Block
               OpDecorate %1 DescriptorSet 0
               OpDecorate %1 Binding 0
               OpDecorate %1 NonWritable
       %uint = OpTypeInt 32 0
     %v4uint = OpTypeVector %uint 4
    %uint_32 = OpConstant %uint 32
%_arr_v4uint_uint_32 = OpTypeArray %v4uint %uint_32
%u_block_tint_explicit_layout = OpTypeStruct %_arr_v4uint_uint_32
%_ptr_Uniform_u_block_tint_explicit_layout = OpTypePointer Uniform %u_block_tint_explicit_layout
          %1 = OpVariable %_ptr_Uniform_u_block_tint_explicit_layout Uniform
       %void = OpTypeVoid
         %10 = OpTypeFunction %void
       %half = OpTypeFloat 16
     %v4half = OpTypeVector %half 4
 %mat4v4half = OpTypeMatrix %v4half 4
   %uint_264 = OpConstant %uint 264
%_ptr_Uniform_v4uint = OpTypePointer Uniform %v4uint
     %uint_0 = OpConstant %uint 0
     %uint_1 = OpConstant %uint 1
     %v2uint = OpTypeVector %uint 2
         %38 = OpTypeFunction %mat4v4half %uint
    %uint_16 = OpConstant %uint 16
    %uint_15 = OpConstant %uint 15
     %uint_2 = OpConstant %uint 2
       %bool = OpTypeBool
     %v2bool = OpTypeVector %bool 2
     %uint_8 = OpConstant %uint 8
    %uint_24 = OpConstant %uint 24
          %f = OpFunction %void None %10
         %11 = OpLabel
         %12 = OpFunctionCall %mat4v4half %16 %uint_264
          %t = OpTranspose %mat4v4half %12
         %19 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %uint_1
         %23 = OpLoad %v4uint %19 None
         %24 = OpVectorShuffle %v2uint %23 %23 0 1
         %26 = OpBitcast %v4half %24
         %27 = OpVectorShuffle %v4half %26 %26 1 3 0 2
          %l = OpExtInst %half %29 Length %27
         %30 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %uint_1
         %31 = OpLoad %v4uint %30 None
         %32 = OpVectorShuffle %v2uint %31 %31 0 1
         %33 = OpBitcast %v4half %32
         %34 = OpVectorShuffle %v4half %33 %33 1 3 0 2
         %35 = OpCompositeExtract %half %34 0
          %a = OpExtInst %half %29 FAbs %35
               OpReturn
               OpFunctionEnd
         %16 = OpFunction %mat4v4half None %38
%start_byte_offset = OpFunctionParameter %uint
         %39 = OpLabel
         %40 = OpUDiv %uint %start_byte_offset %uint_16
         %42 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %40
         %43 = OpBitwiseAnd %uint %start_byte_offset %uint_15
         %45 = OpShiftRightLogical %uint %43 %uint_2
         %47 = OpLoad %v4uint %42 None
         %48 = OpVectorShuffle %v2uint %47 %47 2 3
         %49 = OpVectorShuffle %v2uint %47 %47 0 1
         %50 = OpIEqual %bool %45 %uint_2
         %53 = OpCompositeConstruct %v2bool %50 %50
         %54 = OpSelect %v2uint %53 %48 %49
         %55 = OpBitcast %v4half %54
         %56 = OpIAdd %uint %uint_8 %start_byte_offset
         %58 = OpUDiv %uint %56 %uint_16
         %59 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %58
         %60 = OpBitwiseAnd %uint %56 %uint_15
         %61 = OpShiftRightLogical %uint %60 %uint_2
         %62 = OpLoad %v4uint %59 None
         %63 = OpVectorShuffle %v2uint %62 %62 2 3
         %64 = OpVectorShuffle %v2uint %62 %62 0 1
         %65 = OpIEqual %bool %61 %uint_2
         %66 = OpCompositeConstruct %v2bool %65 %65
         %67 = OpSelect %v2uint %66 %63 %64
         %68 = OpBitcast %v4half %67
         %69 = OpIAdd %uint %uint_16 %start_byte_offset
         %70 = OpUDiv %uint %69 %uint_16
         %71 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %70
         %72 = OpBitwiseAnd %uint %69 %uint_15
         %73 = OpShiftRightLogical %uint %72 %uint_2
         %74 = OpLoad %v4uint %71 None
         %75 = OpVectorShuffle %v2uint %74 %74 2 3
         %76 = OpVectorShuffle %v2uint %74 %74 0 1
         %77 = OpIEqual %bool %73 %uint_2
         %78 = OpCompositeConstruct %v2bool %77 %77
         %79 = OpSelect %v2uint %78 %75 %76
         %80 = OpBitcast %v4half %79
         %81 = OpIAdd %uint %uint_24 %start_byte_offset
         %83 = OpUDiv %uint %81 %uint_16
         %84 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %83
         %85 = OpBitwiseAnd %uint %81 %uint_15
         %86 = OpShiftRightLogical %uint %85 %uint_2
         %87 = OpLoad %v4uint %84 None
         %88 = OpVectorShuffle %v2uint %87 %87 2 3
         %89 = OpVectorShuffle %v2uint %87 %87 0 1
         %90 = OpIEqual %bool %86 %uint_2
         %91 = OpCompositeConstruct %v2bool %90 %90
         %92 = OpSelect %v2uint %91 %88 %89
         %93 = OpBitcast %v4half %92
         %94 = OpCompositeConstruct %mat4v4half %55 %68 %80 %93
               OpReturnValue %94
               OpFunctionEnd
