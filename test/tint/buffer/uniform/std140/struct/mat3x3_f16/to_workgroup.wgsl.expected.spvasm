; SPIR-V
; Version: 1.3
; Generator: Google Tint Compiler; 1
; Bound: 161
; Schema: 0
               OpCapability Shader
               OpCapability Float16
               OpCapability StorageBuffer16BitAccess
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %f "f" %f_local_invocation_index_Input
               OpExecutionMode %f LocalSize 1 1 1
               OpMemberName %u_block_tint_explicit_layout 0 "inner"
               OpName %u_block_tint_explicit_layout "u_block_tint_explicit_layout"
               OpMemberName %S 0 "before"
               OpMemberName %S 1 "m"
               OpMemberName %S 2 "after"
               OpName %S "S"
               OpName %w "w"
               OpName %f_local_invocation_index_Input "f_local_invocation_index_Input"
               OpName %f_inner "f_inner"
               OpName %tint_local_index "tint_local_index"
               OpName %start_byte_offset "start_byte_offset"
               OpName %start_byte_offset_0 "start_byte_offset"
               OpName %start_byte_offset_1 "start_byte_offset"
               OpName %a "a"
               OpName %f "f"
               OpDecorate %_arr_v4uint_uint_32 ArrayStride 16
               OpMemberDecorate %u_block_tint_explicit_layout 0 Offset 0
               OpDecorate %u_block_tint_explicit_layout Block
               OpDecorate %1 DescriptorSet 0
               OpDecorate %1 Binding 0
               OpDecorate %1 NonWritable
               OpDecorate %f_local_invocation_index_Input BuiltIn LocalInvocationIndex
       %uint = OpTypeInt 32 0
     %v4uint = OpTypeVector %uint 4
    %uint_32 = OpConstant %uint 32
%_arr_v4uint_uint_32 = OpTypeArray %v4uint %uint_32
%u_block_tint_explicit_layout = OpTypeStruct %_arr_v4uint_uint_32
%_ptr_Uniform_u_block_tint_explicit_layout = OpTypePointer Uniform %u_block_tint_explicit_layout
          %1 = OpVariable %_ptr_Uniform_u_block_tint_explicit_layout Uniform
        %int = OpTypeInt 32 1
       %half = OpTypeFloat 16
     %v3half = OpTypeVector %half 3
 %mat3v3half = OpTypeMatrix %v3half 3
          %S = OpTypeStruct %int %mat3v3half %int
     %uint_4 = OpConstant %uint 4
%_arr_S_uint_4 = OpTypeArray %S %uint_4
%_ptr_Workgroup__arr_S_uint_4 = OpTypePointer Workgroup %_arr_S_uint_4
          %w = OpVariable %_ptr_Workgroup__arr_S_uint_4 Workgroup
%_ptr_Input_uint = OpTypePointer Input %uint
%f_local_invocation_index_Input = OpVariable %_ptr_Input_uint Input
       %void = OpTypeVoid
         %22 = OpTypeFunction %void %uint
     %uint_2 = OpConstant %uint 2
   %uint_264 = OpConstant %uint 264
     %uint_0 = OpConstant %uint 0
%_ptr_Workgroup_S = OpTypePointer Workgroup %S
     %uint_1 = OpConstant %uint 1
   %uint_256 = OpConstant %uint 256
%_ptr_Workgroup_mat3v3half = OpTypePointer Workgroup %mat3v3half
     %uint_3 = OpConstant %uint 3
%_ptr_Workgroup_v3half = OpTypePointer Workgroup %v3half
%_ptr_Uniform_v4uint = OpTypePointer Uniform %v4uint
     %v2uint = OpTypeVector %uint 2
     %v4half = OpTypeVector %half 4
       %bool = OpTypeBool
         %64 = OpConstantNull %S
         %66 = OpTypeFunction %mat3v3half %uint
    %uint_16 = OpConstant %uint 16
    %uint_15 = OpConstant %uint 15
     %v2bool = OpTypeVector %bool 2
     %uint_8 = OpConstant %uint 8
        %112 = OpTypeFunction %S %uint
    %uint_64 = OpConstant %uint 64
        %134 = OpTypeFunction %_arr_S_uint_4 %uint
%_ptr_Function__arr_S_uint_4 = OpTypePointer Function %_arr_S_uint_4
        %138 = OpConstantNull %_arr_S_uint_4
   %uint_128 = OpConstant %uint 128
%_ptr_Function_S = OpTypePointer Function %S
        %157 = OpTypeFunction %void
    %f_inner = OpFunction %void None %22
%tint_local_index = OpFunctionParameter %uint
         %23 = OpLabel
               OpBranch %24
         %24 = OpLabel
               OpBranch %27
         %27 = OpLabel
         %29 = OpPhi %uint %tint_local_index %24 %30 %26
               OpLoopMerge %28 %26 None
               OpBranch %25
         %25 = OpLabel
         %59 = OpUGreaterThanEqual %bool %29 %uint_4
               OpSelectionMerge %61 None
               OpBranchConditional %59 %62 %61
         %62 = OpLabel
               OpBranch %28
         %61 = OpLabel
         %63 = OpAccessChain %_ptr_Workgroup_S %w %29
               OpStore %63 %64 None
               OpBranch %26
         %26 = OpLabel
         %30 = OpIAdd %uint %29 %uint_1
               OpBranch %27
         %28 = OpLabel
               OpControlBarrier %uint_2 %uint_2 %uint_264
         %34 = OpFunctionCall %_arr_S_uint_4 %35 %uint_0
               OpStore %w %34 None
         %37 = OpAccessChain %_ptr_Workgroup_S %w %uint_1
         %40 = OpFunctionCall %S %41 %uint_256
               OpStore %37 %40 None
         %43 = OpAccessChain %_ptr_Workgroup_mat3v3half %w %uint_3 %uint_1
         %46 = OpFunctionCall %mat3v3half %47 %uint_264
               OpStore %43 %46 None
         %48 = OpAccessChain %_ptr_Workgroup_v3half %w %uint_1 %uint_1 %uint_0
         %50 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %uint_1
         %52 = OpLoad %v4uint %50 None
         %53 = OpVectorShuffle %v2uint %52 %52 0 1
         %56 = OpBitcast %v4half %53
         %57 = OpVectorShuffle %v3half %56 %56 0 1 2
         %58 = OpVectorShuffle %v3half %57 %57 2 0 1
               OpStore %48 %58 None
               OpReturn
               OpFunctionEnd
         %47 = OpFunction %mat3v3half None %66
%start_byte_offset = OpFunctionParameter %uint
         %67 = OpLabel
         %68 = OpUDiv %uint %start_byte_offset %uint_16
         %70 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %68
         %71 = OpBitwiseAnd %uint %start_byte_offset %uint_15
         %73 = OpShiftRightLogical %uint %71 %uint_2
         %74 = OpLoad %v4uint %70 None
         %75 = OpVectorShuffle %v2uint %74 %74 2 3
         %76 = OpVectorShuffle %v2uint %74 %74 0 1
         %77 = OpIEqual %bool %73 %uint_2
         %79 = OpCompositeConstruct %v2bool %77 %77
         %80 = OpSelect %v2uint %79 %75 %76
         %81 = OpBitcast %v4half %80
         %82 = OpVectorShuffle %v3half %81 %81 0 1 2
         %83 = OpIAdd %uint %uint_8 %start_byte_offset
         %85 = OpUDiv %uint %83 %uint_16
         %86 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %85
         %87 = OpBitwiseAnd %uint %83 %uint_15
         %88 = OpShiftRightLogical %uint %87 %uint_2
         %89 = OpLoad %v4uint %86 None
         %90 = OpVectorShuffle %v2uint %89 %89 2 3
         %91 = OpVectorShuffle %v2uint %89 %89 0 1
         %92 = OpIEqual %bool %88 %uint_2
         %93 = OpCompositeConstruct %v2bool %92 %92
         %94 = OpSelect %v2uint %93 %90 %91
         %95 = OpBitcast %v4half %94
         %96 = OpVectorShuffle %v3half %95 %95 0 1 2
         %97 = OpIAdd %uint %uint_16 %start_byte_offset
         %98 = OpUDiv %uint %97 %uint_16
         %99 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %98
        %100 = OpBitwiseAnd %uint %97 %uint_15
        %101 = OpShiftRightLogical %uint %100 %uint_2
        %102 = OpLoad %v4uint %99 None
        %103 = OpVectorShuffle %v2uint %102 %102 2 3
        %104 = OpVectorShuffle %v2uint %102 %102 0 1
        %105 = OpIEqual %bool %101 %uint_2
        %106 = OpCompositeConstruct %v2bool %105 %105
        %107 = OpSelect %v2uint %106 %103 %104
        %108 = OpBitcast %v4half %107
        %109 = OpVectorShuffle %v3half %108 %108 0 1 2
        %110 = OpCompositeConstruct %mat3v3half %82 %96 %109
               OpReturnValue %110
               OpFunctionEnd
         %41 = OpFunction %S None %112
%start_byte_offset_0 = OpFunctionParameter %uint
        %113 = OpLabel
        %114 = OpUDiv %uint %start_byte_offset_0 %uint_16
        %115 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %114
        %116 = OpBitwiseAnd %uint %start_byte_offset_0 %uint_15
        %117 = OpShiftRightLogical %uint %116 %uint_2
        %118 = OpLoad %v4uint %115 None
        %119 = OpVectorExtractDynamic %uint %118 %117
        %120 = OpBitcast %int %119
        %121 = OpIAdd %uint %uint_8 %start_byte_offset_0
        %122 = OpFunctionCall %mat3v3half %47 %121
        %123 = OpIAdd %uint %uint_64 %start_byte_offset_0
        %125 = OpUDiv %uint %123 %uint_16
        %126 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %125
        %127 = OpBitwiseAnd %uint %123 %uint_15
        %128 = OpShiftRightLogical %uint %127 %uint_2
        %129 = OpLoad %v4uint %126 None
        %130 = OpVectorExtractDynamic %uint %129 %128
        %131 = OpBitcast %int %130
        %132 = OpCompositeConstruct %S %120 %122 %131
               OpReturnValue %132
               OpFunctionEnd
         %35 = OpFunction %_arr_S_uint_4 None %134
%start_byte_offset_1 = OpFunctionParameter %uint
        %135 = OpLabel
          %a = OpVariable %_ptr_Function__arr_S_uint_4 Function
               OpStore %a %138
               OpBranch %139
        %139 = OpLabel
               OpBranch %142
        %142 = OpLabel
        %144 = OpPhi %uint %uint_0 %139 %145 %141
               OpLoopMerge %143 %141 None
               OpBranch %140
        %140 = OpLabel
        %147 = OpUGreaterThanEqual %bool %144 %uint_4
               OpSelectionMerge %148 None
               OpBranchConditional %147 %149 %148
        %149 = OpLabel
               OpBranch %143
        %148 = OpLabel
        %150 = OpIMul %uint %144 %uint_128
        %152 = OpIAdd %uint %start_byte_offset_1 %150
        %153 = OpAccessChain %_ptr_Function_S %a %144
        %155 = OpFunctionCall %S %41 %152
               OpStore %153 %155 None
               OpBranch %141
        %141 = OpLabel
        %145 = OpIAdd %uint %144 %uint_1
               OpBranch %142
        %143 = OpLabel
        %146 = OpLoad %_arr_S_uint_4 %a None
               OpReturnValue %146
               OpFunctionEnd
          %f = OpFunction %void None %157
        %158 = OpLabel
        %159 = OpLoad %uint %f_local_invocation_index_Input None
        %160 = OpFunctionCall %void %f_inner %159
               OpReturn
               OpFunctionEnd
