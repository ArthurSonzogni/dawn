; SPIR-V
; Version: 1.3
; Generator: Google Tint Compiler; 1
; Bound: 164
; Schema: 0
               OpCapability Shader
               OpCapability Float16
               OpCapability StorageBuffer16BitAccess
         %33 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %f "f"
               OpExecutionMode %f LocalSize 1 1 1
               OpMemberName %a_block_tint_explicit_layout 0 "inner"
               OpName %a_block_tint_explicit_layout "a_block_tint_explicit_layout"
               OpMemberName %s_block 0 "inner"
               OpName %s_block "s_block"
               OpName %counter "counter"
               OpName %i "i"
               OpName %f "f"
               OpName %l_a "l_a"
               OpName %l_a_i "l_a_i"
               OpName %l_a_i_i "l_a_i_i"
               OpName %start_byte_offset "start_byte_offset"
               OpName %a "a"
               OpName %start_byte_offset_0 "start_byte_offset"
               OpDecorate %_arr_v4uint_uint_8 ArrayStride 16
               OpMemberDecorate %a_block_tint_explicit_layout 0 Offset 0
               OpDecorate %a_block_tint_explicit_layout Block
               OpDecorate %1 DescriptorSet 0
               OpDecorate %1 Binding 0
               OpDecorate %1 NonWritable
               OpMemberDecorate %s_block 0 Offset 0
               OpDecorate %s_block Block
               OpDecorate %8 DescriptorSet 0
               OpDecorate %8 Binding 1
               OpDecorate %8 Coherent
       %uint = OpTypeInt 32 0
     %v4uint = OpTypeVector %uint 4
     %uint_8 = OpConstant %uint 8
%_arr_v4uint_uint_8 = OpTypeArray %v4uint %uint_8
%a_block_tint_explicit_layout = OpTypeStruct %_arr_v4uint_uint_8
%_ptr_Uniform_a_block_tint_explicit_layout = OpTypePointer Uniform %a_block_tint_explicit_layout
          %1 = OpVariable %_ptr_Uniform_a_block_tint_explicit_layout Uniform
       %half = OpTypeFloat 16
    %s_block = OpTypeStruct %half
%_ptr_StorageBuffer_s_block = OpTypePointer StorageBuffer %s_block
          %8 = OpVariable %_ptr_StorageBuffer_s_block StorageBuffer
        %int = OpTypeInt 32 1
%_ptr_Private_int = OpTypePointer Private %int
      %int_0 = OpConstant %int 0
    %counter = OpVariable %_ptr_Private_int Private %int_0
         %17 = OpTypeFunction %int
      %int_1 = OpConstant %int 1
       %void = OpTypeVoid
         %28 = OpTypeFunction %void
     %uint_3 = OpConstant %uint 3
    %uint_32 = OpConstant %uint 32
     %v4half = OpTypeVector %half 4
 %mat4v4half = OpTypeMatrix %v4half 4
     %uint_4 = OpConstant %uint 4
%_arr_mat4v4half_uint_4 = OpTypeArray %mat4v4half %uint_4
     %uint_0 = OpConstant %uint 0
    %uint_16 = OpConstant %uint 16
%_ptr_Uniform_v4uint = OpTypePointer Uniform %v4uint
     %v2uint = OpTypeVector %uint 2
     %uint_2 = OpConstant %uint 2
       %bool = OpTypeBool
     %v2bool = OpTypeVector %bool 2
     %uint_1 = OpConstant %uint 1
     %v2half = OpTypeVector %half 2
%_ptr_StorageBuffer_half = OpTypePointer StorageBuffer %half
         %91 = OpTypeFunction %_arr_mat4v4half_uint_4 %uint
%_ptr_Function__arr_mat4v4half_uint_4 = OpTypePointer Function %_arr_mat4v4half_uint_4
         %95 = OpConstantNull %_arr_mat4v4half_uint_4
%_ptr_Function_mat4v4half = OpTypePointer Function %mat4v4half
        %113 = OpTypeFunction %mat4v4half %uint
    %uint_24 = OpConstant %uint 24
          %i = OpFunction %int None %17
         %18 = OpLabel
         %19 = OpLoad %int %counter None
         %20 = OpBitcast %uint %19
         %21 = OpBitcast %uint %int_1
         %23 = OpIAdd %uint %20 %21
         %24 = OpBitcast %int %23
               OpStore %counter %24 None
         %25 = OpLoad %int %counter None
               OpReturnValue %25
               OpFunctionEnd
          %f = OpFunction %void None %28
         %29 = OpLabel
         %30 = OpFunctionCall %int %i
         %31 = OpBitcast %uint %30
         %32 = OpExtInst %uint %33 UMin %31 %uint_3
         %35 = OpIMul %uint %uint_32 %32
         %37 = OpFunctionCall %int %i
         %38 = OpBitcast %uint %37
         %39 = OpExtInst %uint %33 UMin %38 %uint_3
         %40 = OpIMul %uint %uint_8 %39
        %l_a = OpFunctionCall %_arr_mat4v4half_uint_4 %46 %uint_0
      %l_a_i = OpFunctionCall %mat4v4half %49 %35
         %50 = OpIAdd %uint %35 %40
         %51 = OpUDiv %uint %50 %uint_16
         %53 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %51
         %55 = OpUMod %uint %50 %uint_16
         %56 = OpUDiv %uint %55 %uint_4
         %57 = OpLoad %v4uint %53 None
         %58 = OpVectorShuffle %v2uint %57 %57 2 3
         %60 = OpVectorShuffle %v2uint %57 %57 0 1
         %61 = OpIEqual %bool %56 %uint_2
         %65 = OpCompositeConstruct %v2bool %61 %61
         %66 = OpSelect %v2uint %65 %58 %60
    %l_a_i_i = OpBitcast %v4half %66
         %68 = OpIAdd %uint %35 %40
         %69 = OpUDiv %uint %68 %uint_16
         %70 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %69
         %71 = OpUMod %uint %68 %uint_16
         %72 = OpUDiv %uint %71 %uint_4
         %73 = OpLoad %v4uint %70 None
         %74 = OpVectorExtractDynamic %uint %73 %72
         %75 = OpUMod %uint %68 %uint_4
         %76 = OpIEqual %bool %75 %uint_0
         %77 = OpSelect %uint %76 %uint_0 %uint_1
         %80 = OpBitcast %v2half %74
         %81 = OpVectorExtractDynamic %half %80 %77
         %82 = OpCompositeExtract %half %l_a 0 0 0
         %83 = OpFAdd %half %81 %82
         %84 = OpCompositeExtract %half %l_a_i 0 0
         %85 = OpFAdd %half %83 %84
         %86 = OpCompositeExtract %half %l_a_i_i 0
         %87 = OpFAdd %half %85 %86
         %88 = OpAccessChain %_ptr_StorageBuffer_half %8 %uint_0
               OpStore %88 %87 None
               OpReturn
               OpFunctionEnd
         %46 = OpFunction %_arr_mat4v4half_uint_4 None %91
%start_byte_offset = OpFunctionParameter %uint
         %92 = OpLabel
          %a = OpVariable %_ptr_Function__arr_mat4v4half_uint_4 Function
               OpStore %a %95
               OpBranch %96
         %96 = OpLabel
               OpBranch %99
         %99 = OpLabel
        %101 = OpPhi %uint %uint_0 %96 %102 %98
               OpLoopMerge %100 %98 None
               OpBranch %97
         %97 = OpLabel
        %104 = OpUGreaterThanEqual %bool %101 %uint_4
               OpSelectionMerge %105 None
               OpBranchConditional %104 %106 %105
        %106 = OpLabel
               OpBranch %100
        %105 = OpLabel
        %107 = OpIMul %uint %101 %uint_32
        %108 = OpIAdd %uint %start_byte_offset %107
        %109 = OpAccessChain %_ptr_Function_mat4v4half %a %101
        %111 = OpFunctionCall %mat4v4half %49 %108
               OpStore %109 %111 None
               OpBranch %98
         %98 = OpLabel
        %102 = OpIAdd %uint %101 %uint_1
               OpBranch %99
        %100 = OpLabel
        %103 = OpLoad %_arr_mat4v4half_uint_4 %a None
               OpReturnValue %103
               OpFunctionEnd
         %49 = OpFunction %mat4v4half None %113
%start_byte_offset_0 = OpFunctionParameter %uint
        %114 = OpLabel
        %115 = OpUDiv %uint %start_byte_offset_0 %uint_16
        %116 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %115
        %117 = OpUMod %uint %start_byte_offset_0 %uint_16
        %118 = OpUDiv %uint %117 %uint_4
        %119 = OpLoad %v4uint %116 None
        %120 = OpVectorShuffle %v2uint %119 %119 2 3
        %121 = OpVectorShuffle %v2uint %119 %119 0 1
        %122 = OpIEqual %bool %118 %uint_2
        %123 = OpCompositeConstruct %v2bool %122 %122
        %124 = OpSelect %v2uint %123 %120 %121
        %125 = OpBitcast %v4half %124
        %126 = OpIAdd %uint %uint_8 %start_byte_offset_0
        %127 = OpUDiv %uint %126 %uint_16
        %128 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %127
        %129 = OpUMod %uint %126 %uint_16
        %130 = OpUDiv %uint %129 %uint_4
        %131 = OpLoad %v4uint %128 None
        %132 = OpVectorShuffle %v2uint %131 %131 2 3
        %133 = OpVectorShuffle %v2uint %131 %131 0 1
        %134 = OpIEqual %bool %130 %uint_2
        %135 = OpCompositeConstruct %v2bool %134 %134
        %136 = OpSelect %v2uint %135 %132 %133
        %137 = OpBitcast %v4half %136
        %138 = OpIAdd %uint %uint_16 %start_byte_offset_0
        %139 = OpUDiv %uint %138 %uint_16
        %140 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %139
        %141 = OpUMod %uint %138 %uint_16
        %142 = OpUDiv %uint %141 %uint_4
        %143 = OpLoad %v4uint %140 None
        %144 = OpVectorShuffle %v2uint %143 %143 2 3
        %145 = OpVectorShuffle %v2uint %143 %143 0 1
        %146 = OpIEqual %bool %142 %uint_2
        %147 = OpCompositeConstruct %v2bool %146 %146
        %148 = OpSelect %v2uint %147 %144 %145
        %149 = OpBitcast %v4half %148
        %150 = OpIAdd %uint %uint_24 %start_byte_offset_0
        %152 = OpUDiv %uint %150 %uint_16
        %153 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %152
        %154 = OpUMod %uint %150 %uint_16
        %155 = OpUDiv %uint %154 %uint_4
        %156 = OpLoad %v4uint %153 None
        %157 = OpVectorShuffle %v2uint %156 %156 2 3
        %158 = OpVectorShuffle %v2uint %156 %156 0 1
        %159 = OpIEqual %bool %155 %uint_2
        %160 = OpCompositeConstruct %v2bool %159 %159
        %161 = OpSelect %v2uint %160 %157 %158
        %162 = OpBitcast %v4half %161
        %163 = OpCompositeConstruct %mat4v4half %125 %137 %149 %162
               OpReturnValue %163
               OpFunctionEnd
