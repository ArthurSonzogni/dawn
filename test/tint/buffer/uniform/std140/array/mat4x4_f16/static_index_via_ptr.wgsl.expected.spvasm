; SPIR-V
; Version: 1.3
; Generator: Google Tint Compiler; 1
; Bound: 127
; Schema: 0
               OpCapability Shader
               OpCapability Float16
               OpCapability StorageBuffer16BitAccess
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %f "f"
               OpExecutionMode %f LocalSize 1 1 1
               OpMemberName %a_block_tint_explicit_layout 0 "inner"
               OpName %a_block_tint_explicit_layout "a_block_tint_explicit_layout"
               OpMemberName %s_block 0 "inner"
               OpName %s_block "s_block"
               OpName %f "f"
               OpName %l_a "l_a"
               OpName %l_a_i "l_a_i"
               OpName %l_a_i_i "l_a_i_i"
               OpName %start_byte_offset "start_byte_offset"
               OpName %a "a"
               OpName %start_byte_offset_0 "start_byte_offset"
               OpDecorate %_arr_v4uint_uint_8 ArrayStride 16
               OpMemberDecorate %a_block_tint_explicit_layout 0 Offset 0
               OpDecorate %a_block_tint_explicit_layout Block
               OpDecorate %1 DescriptorSet 0
               OpDecorate %1 Binding 0
               OpDecorate %1 NonWritable
               OpMemberDecorate %s_block 0 Offset 0
               OpDecorate %s_block Block
               OpDecorate %8 DescriptorSet 0
               OpDecorate %8 Binding 1
               OpDecorate %8 Coherent
       %uint = OpTypeInt 32 0
     %v4uint = OpTypeVector %uint 4
     %uint_8 = OpConstant %uint 8
%_arr_v4uint_uint_8 = OpTypeArray %v4uint %uint_8
%a_block_tint_explicit_layout = OpTypeStruct %_arr_v4uint_uint_8
%_ptr_Uniform_a_block_tint_explicit_layout = OpTypePointer Uniform %a_block_tint_explicit_layout
          %1 = OpVariable %_ptr_Uniform_a_block_tint_explicit_layout Uniform
       %half = OpTypeFloat 16
    %s_block = OpTypeStruct %half
%_ptr_StorageBuffer_s_block = OpTypePointer StorageBuffer %s_block
          %8 = OpVariable %_ptr_StorageBuffer_s_block StorageBuffer
       %void = OpTypeVoid
         %14 = OpTypeFunction %void
     %v4half = OpTypeVector %half 4
 %mat4v4half = OpTypeMatrix %v4half 4
     %uint_4 = OpConstant %uint 4
%_arr_mat4v4half_uint_4 = OpTypeArray %mat4v4half %uint_4
     %uint_0 = OpConstant %uint 0
    %uint_64 = OpConstant %uint 64
%_ptr_Uniform_v4uint = OpTypePointer Uniform %v4uint
     %v2uint = OpTypeVector %uint 2
     %v2half = OpTypeVector %half 2
%_ptr_StorageBuffer_half = OpTypePointer StorageBuffer %half
         %47 = OpTypeFunction %_arr_mat4v4half_uint_4 %uint
%_ptr_Function__arr_mat4v4half_uint_4 = OpTypePointer Function %_arr_mat4v4half_uint_4
         %51 = OpConstantNull %_arr_mat4v4half_uint_4
       %bool = OpTypeBool
    %uint_32 = OpConstant %uint 32
%_ptr_Function_mat4v4half = OpTypePointer Function %mat4v4half
     %uint_1 = OpConstant %uint 1
         %72 = OpTypeFunction %mat4v4half %uint
    %uint_16 = OpConstant %uint 16
    %uint_15 = OpConstant %uint 15
     %uint_2 = OpConstant %uint 2
     %v2bool = OpTypeVector %bool 2
    %uint_24 = OpConstant %uint 24
          %f = OpFunction %void None %14
         %15 = OpLabel
        %l_a = OpFunctionCall %_arr_mat4v4half_uint_4 %21 %uint_0
      %l_a_i = OpFunctionCall %mat4v4half %24 %uint_64
         %26 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %uint_4
         %28 = OpLoad %v4uint %26 None
         %29 = OpVectorShuffle %v2uint %28 %28 2 3
    %l_a_i_i = OpBitcast %v4half %29
         %32 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %uint_4
         %33 = OpLoad %v4uint %32 None
         %34 = OpCompositeExtract %uint %33 2
         %36 = OpBitcast %v2half %34
         %37 = OpCompositeExtract %half %36 0
         %38 = OpCompositeExtract %half %l_a 0 0 0
         %39 = OpFAdd %half %37 %38
         %40 = OpCompositeExtract %half %l_a_i 0 0
         %41 = OpFAdd %half %39 %40
         %42 = OpCompositeExtract %half %l_a_i_i 0
         %43 = OpFAdd %half %41 %42
         %44 = OpAccessChain %_ptr_StorageBuffer_half %8 %uint_0
               OpStore %44 %43 None
               OpReturn
               OpFunctionEnd
         %21 = OpFunction %_arr_mat4v4half_uint_4 None %47
%start_byte_offset = OpFunctionParameter %uint
         %48 = OpLabel
          %a = OpVariable %_ptr_Function__arr_mat4v4half_uint_4 Function
               OpStore %a %51
               OpBranch %52
         %52 = OpLabel
               OpBranch %55
         %55 = OpLabel
         %57 = OpPhi %uint %uint_0 %52 %58 %54
               OpLoopMerge %56 %54 None
               OpBranch %53
         %53 = OpLabel
         %60 = OpUGreaterThanEqual %bool %57 %uint_4
               OpSelectionMerge %62 None
               OpBranchConditional %60 %63 %62
         %63 = OpLabel
               OpBranch %56
         %62 = OpLabel
         %64 = OpIMul %uint %57 %uint_32
         %66 = OpIAdd %uint %start_byte_offset %64
         %67 = OpAccessChain %_ptr_Function_mat4v4half %a %57
         %69 = OpFunctionCall %mat4v4half %24 %66
               OpStore %67 %69 None
               OpBranch %54
         %54 = OpLabel
         %58 = OpIAdd %uint %57 %uint_1
               OpBranch %55
         %56 = OpLabel
         %59 = OpLoad %_arr_mat4v4half_uint_4 %a None
               OpReturnValue %59
               OpFunctionEnd
         %24 = OpFunction %mat4v4half None %72
%start_byte_offset_0 = OpFunctionParameter %uint
         %73 = OpLabel
         %74 = OpUDiv %uint %start_byte_offset_0 %uint_16
         %76 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %74
         %77 = OpBitwiseAnd %uint %start_byte_offset_0 %uint_15
         %79 = OpShiftRightLogical %uint %77 %uint_2
         %81 = OpLoad %v4uint %76 None
         %82 = OpVectorShuffle %v2uint %81 %81 2 3
         %83 = OpVectorShuffle %v2uint %81 %81 0 1
         %84 = OpIEqual %bool %79 %uint_2
         %86 = OpCompositeConstruct %v2bool %84 %84
         %87 = OpSelect %v2uint %86 %82 %83
         %88 = OpBitcast %v4half %87
         %89 = OpIAdd %uint %uint_8 %start_byte_offset_0
         %90 = OpUDiv %uint %89 %uint_16
         %91 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %90
         %92 = OpBitwiseAnd %uint %89 %uint_15
         %93 = OpShiftRightLogical %uint %92 %uint_2
         %94 = OpLoad %v4uint %91 None
         %95 = OpVectorShuffle %v2uint %94 %94 2 3
         %96 = OpVectorShuffle %v2uint %94 %94 0 1
         %97 = OpIEqual %bool %93 %uint_2
         %98 = OpCompositeConstruct %v2bool %97 %97
         %99 = OpSelect %v2uint %98 %95 %96
        %100 = OpBitcast %v4half %99
        %101 = OpIAdd %uint %uint_16 %start_byte_offset_0
        %102 = OpUDiv %uint %101 %uint_16
        %103 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %102
        %104 = OpBitwiseAnd %uint %101 %uint_15
        %105 = OpShiftRightLogical %uint %104 %uint_2
        %106 = OpLoad %v4uint %103 None
        %107 = OpVectorShuffle %v2uint %106 %106 2 3
        %108 = OpVectorShuffle %v2uint %106 %106 0 1
        %109 = OpIEqual %bool %105 %uint_2
        %110 = OpCompositeConstruct %v2bool %109 %109
        %111 = OpSelect %v2uint %110 %107 %108
        %112 = OpBitcast %v4half %111
        %113 = OpIAdd %uint %uint_24 %start_byte_offset_0
        %115 = OpUDiv %uint %113 %uint_16
        %116 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %115
        %117 = OpBitwiseAnd %uint %113 %uint_15
        %118 = OpShiftRightLogical %uint %117 %uint_2
        %119 = OpLoad %v4uint %116 None
        %120 = OpVectorShuffle %v2uint %119 %119 2 3
        %121 = OpVectorShuffle %v2uint %119 %119 0 1
        %122 = OpIEqual %bool %118 %uint_2
        %123 = OpCompositeConstruct %v2bool %122 %122
        %124 = OpSelect %v2uint %123 %120 %121
        %125 = OpBitcast %v4half %124
        %126 = OpCompositeConstruct %mat4v4half %88 %100 %112 %125
               OpReturnValue %126
               OpFunctionEnd
