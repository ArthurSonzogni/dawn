; SPIR-V
; Version: 1.3
; Generator: Google Tint Compiler; 1
; Bound: 103
; Schema: 0
               OpCapability Shader
         %33 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %f "f"
               OpExecutionMode %f LocalSize 1 1 1
               OpMemberName %u_block_tint_explicit_layout 0 "inner"
               OpName %u_block_tint_explicit_layout "u_block_tint_explicit_layout"
               OpMemberName %s_block 0 "inner"
               OpName %s_block "s_block"
               OpName %f "f"
               OpName %t "t"
               OpName %l "l"
               OpName %a "a"
               OpName %start_byte_offset "start_byte_offset"
               OpDecorate %_arr_v4uint_uint_8 ArrayStride 16
               OpMemberDecorate %u_block_tint_explicit_layout 0 Offset 0
               OpDecorate %u_block_tint_explicit_layout Block
               OpDecorate %1 DescriptorSet 0
               OpDecorate %1 Binding 0
               OpDecorate %1 NonWritable
               OpMemberDecorate %s_block 0 Offset 0
               OpDecorate %s_block Block
               OpDecorate %8 DescriptorSet 0
               OpDecorate %8 Binding 1
               OpDecorate %8 Coherent
       %uint = OpTypeInt 32 0
     %v4uint = OpTypeVector %uint 4
     %uint_8 = OpConstant %uint 8
%_arr_v4uint_uint_8 = OpTypeArray %v4uint %uint_8
%u_block_tint_explicit_layout = OpTypeStruct %_arr_v4uint_uint_8
%_ptr_Uniform_u_block_tint_explicit_layout = OpTypePointer Uniform %u_block_tint_explicit_layout
          %1 = OpVariable %_ptr_Uniform_u_block_tint_explicit_layout Uniform
      %float = OpTypeFloat 32
    %s_block = OpTypeStruct %float
%_ptr_StorageBuffer_s_block = OpTypePointer StorageBuffer %s_block
          %8 = OpVariable %_ptr_StorageBuffer_s_block StorageBuffer
       %void = OpTypeVoid
         %14 = OpTypeFunction %void
    %v2float = OpTypeVector %float 2
%mat4v2float = OpTypeMatrix %v2float 4
    %uint_64 = OpConstant %uint 64
    %v4float = OpTypeVector %float 4
%mat2v4float = OpTypeMatrix %v4float 2
%_ptr_Uniform_v4uint = OpTypePointer Uniform %v4uint
     %uint_0 = OpConstant %uint 0
     %v2uint = OpTypeVector %uint 2
%_ptr_StorageBuffer_float = OpTypePointer StorageBuffer %float
         %47 = OpTypeFunction %mat4v2float %uint
    %uint_16 = OpConstant %uint 16
     %uint_4 = OpConstant %uint 4
     %uint_2 = OpConstant %uint 2
       %bool = OpTypeBool
     %v2bool = OpTypeVector %bool 2
    %uint_24 = OpConstant %uint 24
          %f = OpFunction %void None %14
         %15 = OpLabel
         %16 = OpFunctionCall %mat4v2float %19 %uint_64
          %t = OpTranspose %mat2v4float %16
         %24 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %uint_0
         %27 = OpLoad %v4uint %24 None
         %28 = OpVectorShuffle %v2uint %27 %27 2 3
         %30 = OpBitcast %v2float %28
         %31 = OpVectorShuffle %v2float %30 %30 1 0
          %l = OpExtInst %float %33 Length %31
         %34 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %uint_0
         %35 = OpLoad %v4uint %34 None
         %36 = OpVectorShuffle %v2uint %35 %35 2 3
         %37 = OpBitcast %v2float %36
         %38 = OpVectorShuffle %v2float %37 %37 1 0
         %39 = OpCompositeExtract %float %38 0
          %a = OpExtInst %float %33 FAbs %39
         %41 = OpCompositeExtract %float %t 0 0
         %42 = OpFAdd %float %41 %l
         %43 = OpFAdd %float %42 %a
         %44 = OpAccessChain %_ptr_StorageBuffer_float %8 %uint_0
               OpStore %44 %43 None
               OpReturn
               OpFunctionEnd
         %19 = OpFunction %mat4v2float None %47
%start_byte_offset = OpFunctionParameter %uint
         %48 = OpLabel
         %49 = OpUDiv %uint %start_byte_offset %uint_16
         %51 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %49
         %52 = OpUMod %uint %start_byte_offset %uint_16
         %53 = OpUDiv %uint %52 %uint_4
         %55 = OpLoad %v4uint %51 None
         %56 = OpVectorShuffle %v2uint %55 %55 2 3
         %57 = OpVectorShuffle %v2uint %55 %55 0 1
         %58 = OpIEqual %bool %53 %uint_2
         %62 = OpCompositeConstruct %v2bool %58 %58
         %63 = OpSelect %v2uint %62 %56 %57
         %64 = OpBitcast %v2float %63
         %65 = OpIAdd %uint %uint_8 %start_byte_offset
         %66 = OpUDiv %uint %65 %uint_16
         %67 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %66
         %68 = OpUMod %uint %65 %uint_16
         %69 = OpUDiv %uint %68 %uint_4
         %70 = OpLoad %v4uint %67 None
         %71 = OpVectorShuffle %v2uint %70 %70 2 3
         %72 = OpVectorShuffle %v2uint %70 %70 0 1
         %73 = OpIEqual %bool %69 %uint_2
         %74 = OpCompositeConstruct %v2bool %73 %73
         %75 = OpSelect %v2uint %74 %71 %72
         %76 = OpBitcast %v2float %75
         %77 = OpIAdd %uint %uint_16 %start_byte_offset
         %78 = OpUDiv %uint %77 %uint_16
         %79 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %78
         %80 = OpUMod %uint %77 %uint_16
         %81 = OpUDiv %uint %80 %uint_4
         %82 = OpLoad %v4uint %79 None
         %83 = OpVectorShuffle %v2uint %82 %82 2 3
         %84 = OpVectorShuffle %v2uint %82 %82 0 1
         %85 = OpIEqual %bool %81 %uint_2
         %86 = OpCompositeConstruct %v2bool %85 %85
         %87 = OpSelect %v2uint %86 %83 %84
         %88 = OpBitcast %v2float %87
         %89 = OpIAdd %uint %uint_24 %start_byte_offset
         %91 = OpUDiv %uint %89 %uint_16
         %92 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %91
         %93 = OpUMod %uint %89 %uint_16
         %94 = OpUDiv %uint %93 %uint_4
         %95 = OpLoad %v4uint %92 None
         %96 = OpVectorShuffle %v2uint %95 %95 2 3
         %97 = OpVectorShuffle %v2uint %95 %95 0 1
         %98 = OpIEqual %bool %94 %uint_2
         %99 = OpCompositeConstruct %v2bool %98 %98
        %100 = OpSelect %v2uint %99 %96 %97
        %101 = OpBitcast %v2float %100
        %102 = OpCompositeConstruct %mat4v2float %64 %76 %88 %101
               OpReturnValue %102
               OpFunctionEnd
