; SPIR-V
; Version: 1.3
; Generator: Google Tint Compiler; 1
; Bound: 133
; Schema: 0
               OpCapability Shader
               OpCapability Float16
               OpCapability StorageBuffer16BitAccess
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %f "f"
               OpExecutionMode %f LocalSize 1 1 1
               OpMemberName %a_block_tint_explicit_layout 0 "inner"
               OpName %a_block_tint_explicit_layout "a_block_tint_explicit_layout"
               OpMemberName %s_block 0 "inner"
               OpName %s_block "s_block"
               OpName %f "f"
               OpName %l_a "l_a"
               OpName %l_a_i "l_a_i"
               OpName %l_a_i_i "l_a_i_i"
               OpName %start_byte_offset "start_byte_offset"
               OpName %a "a"
               OpName %start_byte_offset_0 "start_byte_offset"
               OpDecorate %_arr_v4uint_uint_8 ArrayStride 16
               OpMemberDecorate %a_block_tint_explicit_layout 0 Offset 0
               OpDecorate %a_block_tint_explicit_layout Block
               OpDecorate %1 DescriptorSet 0
               OpDecorate %1 Binding 0
               OpDecorate %1 NonWritable
               OpMemberDecorate %s_block 0 Offset 0
               OpDecorate %s_block Block
               OpDecorate %8 DescriptorSet 0
               OpDecorate %8 Binding 1
               OpDecorate %8 Coherent
       %uint = OpTypeInt 32 0
     %v4uint = OpTypeVector %uint 4
     %uint_8 = OpConstant %uint 8
%_arr_v4uint_uint_8 = OpTypeArray %v4uint %uint_8
%a_block_tint_explicit_layout = OpTypeStruct %_arr_v4uint_uint_8
%_ptr_Uniform_a_block_tint_explicit_layout = OpTypePointer Uniform %a_block_tint_explicit_layout
          %1 = OpVariable %_ptr_Uniform_a_block_tint_explicit_layout Uniform
       %half = OpTypeFloat 16
    %s_block = OpTypeStruct %half
%_ptr_StorageBuffer_s_block = OpTypePointer StorageBuffer %s_block
          %8 = OpVariable %_ptr_StorageBuffer_s_block StorageBuffer
       %void = OpTypeVoid
         %14 = OpTypeFunction %void
     %v3half = OpTypeVector %half 3
 %mat4v3half = OpTypeMatrix %v3half 4
     %uint_4 = OpConstant %uint 4
%_arr_mat4v3half_uint_4 = OpTypeArray %mat4v3half %uint_4
     %uint_0 = OpConstant %uint 0
    %uint_64 = OpConstant %uint 64
%_ptr_Uniform_v4uint = OpTypePointer Uniform %v4uint
     %v2uint = OpTypeVector %uint 2
     %v4half = OpTypeVector %half 4
     %v2half = OpTypeVector %half 2
%_ptr_StorageBuffer_half = OpTypePointer StorageBuffer %half
         %49 = OpTypeFunction %_arr_mat4v3half_uint_4 %uint
%_ptr_Function__arr_mat4v3half_uint_4 = OpTypePointer Function %_arr_mat4v3half_uint_4
         %53 = OpConstantNull %_arr_mat4v3half_uint_4
       %bool = OpTypeBool
    %uint_32 = OpConstant %uint 32
%_ptr_Function_mat4v3half = OpTypePointer Function %mat4v3half
     %uint_1 = OpConstant %uint 1
         %74 = OpTypeFunction %mat4v3half %uint
    %uint_16 = OpConstant %uint 16
    %uint_15 = OpConstant %uint 15
     %uint_2 = OpConstant %uint 2
     %v2bool = OpTypeVector %bool 2
    %uint_24 = OpConstant %uint 24
          %f = OpFunction %void None %14
         %15 = OpLabel
        %l_a = OpFunctionCall %_arr_mat4v3half_uint_4 %21 %uint_0
      %l_a_i = OpFunctionCall %mat4v3half %24 %uint_64
         %26 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %uint_4
         %28 = OpLoad %v4uint %26 None
         %29 = OpVectorShuffle %v2uint %28 %28 2 3
         %32 = OpBitcast %v4half %29
    %l_a_i_i = OpVectorShuffle %v3half %32 %32 0 1 2
         %34 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %uint_4
         %35 = OpLoad %v4uint %34 None
         %36 = OpCompositeExtract %uint %35 2
         %38 = OpBitcast %v2half %36
         %39 = OpCompositeExtract %half %38 0
         %40 = OpCompositeExtract %half %l_a 0 0 0
         %41 = OpFAdd %half %39 %40
         %42 = OpCompositeExtract %half %l_a_i 0 0
         %43 = OpFAdd %half %41 %42
         %44 = OpCompositeExtract %half %l_a_i_i 0
         %45 = OpFAdd %half %43 %44
         %46 = OpAccessChain %_ptr_StorageBuffer_half %8 %uint_0
               OpStore %46 %45 None
               OpReturn
               OpFunctionEnd
         %21 = OpFunction %_arr_mat4v3half_uint_4 None %49
%start_byte_offset = OpFunctionParameter %uint
         %50 = OpLabel
          %a = OpVariable %_ptr_Function__arr_mat4v3half_uint_4 Function
               OpStore %a %53
               OpBranch %54
         %54 = OpLabel
               OpBranch %57
         %57 = OpLabel
         %59 = OpPhi %uint %uint_0 %54 %60 %56
               OpLoopMerge %58 %56 None
               OpBranch %55
         %55 = OpLabel
         %62 = OpUGreaterThanEqual %bool %59 %uint_4
               OpSelectionMerge %64 None
               OpBranchConditional %62 %65 %64
         %65 = OpLabel
               OpBranch %58
         %64 = OpLabel
         %66 = OpIMul %uint %59 %uint_32
         %68 = OpIAdd %uint %start_byte_offset %66
         %69 = OpAccessChain %_ptr_Function_mat4v3half %a %59
         %71 = OpFunctionCall %mat4v3half %24 %68
               OpStore %69 %71 None
               OpBranch %56
         %56 = OpLabel
         %60 = OpIAdd %uint %59 %uint_1
               OpBranch %57
         %58 = OpLabel
         %61 = OpLoad %_arr_mat4v3half_uint_4 %a None
               OpReturnValue %61
               OpFunctionEnd
         %24 = OpFunction %mat4v3half None %74
%start_byte_offset_0 = OpFunctionParameter %uint
         %75 = OpLabel
         %76 = OpUDiv %uint %start_byte_offset_0 %uint_16
         %78 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %76
         %79 = OpBitwiseAnd %uint %start_byte_offset_0 %uint_15
         %81 = OpShiftRightLogical %uint %79 %uint_2
         %83 = OpLoad %v4uint %78 None
         %84 = OpVectorShuffle %v2uint %83 %83 2 3
         %85 = OpVectorShuffle %v2uint %83 %83 0 1
         %86 = OpIEqual %bool %81 %uint_2
         %88 = OpCompositeConstruct %v2bool %86 %86
         %89 = OpSelect %v2uint %88 %84 %85
         %90 = OpBitcast %v4half %89
         %91 = OpVectorShuffle %v3half %90 %90 0 1 2
         %92 = OpIAdd %uint %uint_8 %start_byte_offset_0
         %93 = OpUDiv %uint %92 %uint_16
         %94 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %93
         %95 = OpBitwiseAnd %uint %92 %uint_15
         %96 = OpShiftRightLogical %uint %95 %uint_2
         %97 = OpLoad %v4uint %94 None
         %98 = OpVectorShuffle %v2uint %97 %97 2 3
         %99 = OpVectorShuffle %v2uint %97 %97 0 1
        %100 = OpIEqual %bool %96 %uint_2
        %101 = OpCompositeConstruct %v2bool %100 %100
        %102 = OpSelect %v2uint %101 %98 %99
        %103 = OpBitcast %v4half %102
        %104 = OpVectorShuffle %v3half %103 %103 0 1 2
        %105 = OpIAdd %uint %uint_16 %start_byte_offset_0
        %106 = OpUDiv %uint %105 %uint_16
        %107 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %106
        %108 = OpBitwiseAnd %uint %105 %uint_15
        %109 = OpShiftRightLogical %uint %108 %uint_2
        %110 = OpLoad %v4uint %107 None
        %111 = OpVectorShuffle %v2uint %110 %110 2 3
        %112 = OpVectorShuffle %v2uint %110 %110 0 1
        %113 = OpIEqual %bool %109 %uint_2
        %114 = OpCompositeConstruct %v2bool %113 %113
        %115 = OpSelect %v2uint %114 %111 %112
        %116 = OpBitcast %v4half %115
        %117 = OpVectorShuffle %v3half %116 %116 0 1 2
        %118 = OpIAdd %uint %uint_24 %start_byte_offset_0
        %120 = OpUDiv %uint %118 %uint_16
        %121 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %120
        %122 = OpBitwiseAnd %uint %118 %uint_15
        %123 = OpShiftRightLogical %uint %122 %uint_2
        %124 = OpLoad %v4uint %121 None
        %125 = OpVectorShuffle %v2uint %124 %124 2 3
        %126 = OpVectorShuffle %v2uint %124 %124 0 1
        %127 = OpIEqual %bool %123 %uint_2
        %128 = OpCompositeConstruct %v2bool %127 %127
        %129 = OpSelect %v2uint %128 %125 %126
        %130 = OpBitcast %v4half %129
        %131 = OpVectorShuffle %v3half %130 %130 0 1 2
        %132 = OpCompositeConstruct %mat4v3half %91 %104 %117 %131
               OpReturnValue %132
               OpFunctionEnd
