; SPIR-V
; Version: 1.3
; Generator: Google Tint Compiler; 1
; Bound: 108
; Schema: 0
               OpCapability Shader
         %29 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %f "f"
               OpExecutionMode %f LocalSize 1 1 1
               OpMemberName %m_block_tint_explicit_layout 0 "inner"
               OpName %m_block_tint_explicit_layout "m_block_tint_explicit_layout"
               OpName %counter "counter"
               OpName %i "i"
               OpName %f "f"
               OpName %l_m "l_m"
               OpName %l_m_i "l_m_i"
               OpName %start_byte_offset "start_byte_offset"
               OpDecorate %_arr_v4uint_uint_2 ArrayStride 16
               OpMemberDecorate %m_block_tint_explicit_layout 0 Offset 0
               OpDecorate %m_block_tint_explicit_layout Block
               OpDecorate %1 DescriptorSet 0
               OpDecorate %1 Binding 0
               OpDecorate %1 NonWritable
       %uint = OpTypeInt 32 0
     %v4uint = OpTypeVector %uint 4
     %uint_2 = OpConstant %uint 2
%_arr_v4uint_uint_2 = OpTypeArray %v4uint %uint_2
%m_block_tint_explicit_layout = OpTypeStruct %_arr_v4uint_uint_2
%_ptr_Uniform_m_block_tint_explicit_layout = OpTypePointer Uniform %m_block_tint_explicit_layout
          %1 = OpVariable %_ptr_Uniform_m_block_tint_explicit_layout Uniform
        %int = OpTypeInt 32 1
%_ptr_Private_int = OpTypePointer Private %int
      %int_0 = OpConstant %int 0
    %counter = OpVariable %_ptr_Private_int Private %int_0
         %13 = OpTypeFunction %int
      %int_1 = OpConstant %int 1
       %void = OpTypeVoid
         %24 = OpTypeFunction %void
     %uint_3 = OpConstant %uint 3
     %uint_8 = OpConstant %uint 8
      %float = OpTypeFloat 32
    %v2float = OpTypeVector %float 2
%mat4v2float = OpTypeMatrix %v2float 4
     %uint_0 = OpConstant %uint 0
    %uint_16 = OpConstant %uint 16
%_ptr_Uniform_v4uint = OpTypePointer Uniform %v4uint
    %uint_15 = OpConstant %uint 15
     %v2uint = OpTypeVector %uint 2
       %bool = OpTypeBool
     %v2bool = OpTypeVector %bool 2
         %57 = OpTypeFunction %mat4v2float %uint
    %uint_24 = OpConstant %uint 24
          %i = OpFunction %int None %13
         %14 = OpLabel
         %15 = OpLoad %int %counter None
         %16 = OpBitcast %uint %15
         %17 = OpBitcast %uint %int_1
         %19 = OpIAdd %uint %16 %17
         %20 = OpBitcast %int %19
               OpStore %counter %20 None
         %21 = OpLoad %int %counter None
               OpReturnValue %21
               OpFunctionEnd
          %f = OpFunction %void None %24
         %25 = OpLabel
         %26 = OpFunctionCall %int %i
         %27 = OpBitcast %uint %26
         %28 = OpExtInst %uint %29 UMin %27 %uint_3
         %31 = OpIMul %uint %uint_8 %28
        %l_m = OpFunctionCall %mat4v2float %37 %uint_0
         %39 = OpUDiv %uint %31 %uint_16
         %41 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %39
         %43 = OpBitwiseAnd %uint %31 %uint_15
         %45 = OpShiftRightLogical %uint %43 %uint_2
         %46 = OpLoad %v4uint %41 None
         %47 = OpVectorShuffle %v2uint %46 %46 2 3
         %49 = OpVectorShuffle %v2uint %46 %46 0 1
         %50 = OpIEqual %bool %45 %uint_2
         %53 = OpCompositeConstruct %v2bool %50 %50
         %54 = OpSelect %v2uint %53 %47 %49
      %l_m_i = OpBitcast %v2float %54
               OpReturn
               OpFunctionEnd
         %37 = OpFunction %mat4v2float None %57
%start_byte_offset = OpFunctionParameter %uint
         %58 = OpLabel
         %59 = OpUDiv %uint %start_byte_offset %uint_16
         %60 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %59
         %61 = OpBitwiseAnd %uint %start_byte_offset %uint_15
         %62 = OpShiftRightLogical %uint %61 %uint_2
         %63 = OpLoad %v4uint %60 None
         %64 = OpVectorShuffle %v2uint %63 %63 2 3
         %65 = OpVectorShuffle %v2uint %63 %63 0 1
         %66 = OpIEqual %bool %62 %uint_2
         %67 = OpCompositeConstruct %v2bool %66 %66
         %68 = OpSelect %v2uint %67 %64 %65
         %69 = OpBitcast %v2float %68
         %70 = OpIAdd %uint %uint_8 %start_byte_offset
         %71 = OpUDiv %uint %70 %uint_16
         %72 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %71
         %73 = OpBitwiseAnd %uint %70 %uint_15
         %74 = OpShiftRightLogical %uint %73 %uint_2
         %75 = OpLoad %v4uint %72 None
         %76 = OpVectorShuffle %v2uint %75 %75 2 3
         %77 = OpVectorShuffle %v2uint %75 %75 0 1
         %78 = OpIEqual %bool %74 %uint_2
         %79 = OpCompositeConstruct %v2bool %78 %78
         %80 = OpSelect %v2uint %79 %76 %77
         %81 = OpBitcast %v2float %80
         %82 = OpIAdd %uint %uint_16 %start_byte_offset
         %83 = OpUDiv %uint %82 %uint_16
         %84 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %83
         %85 = OpBitwiseAnd %uint %82 %uint_15
         %86 = OpShiftRightLogical %uint %85 %uint_2
         %87 = OpLoad %v4uint %84 None
         %88 = OpVectorShuffle %v2uint %87 %87 2 3
         %89 = OpVectorShuffle %v2uint %87 %87 0 1
         %90 = OpIEqual %bool %86 %uint_2
         %91 = OpCompositeConstruct %v2bool %90 %90
         %92 = OpSelect %v2uint %91 %88 %89
         %93 = OpBitcast %v2float %92
         %94 = OpIAdd %uint %uint_24 %start_byte_offset
         %96 = OpUDiv %uint %94 %uint_16
         %97 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %96
         %98 = OpBitwiseAnd %uint %94 %uint_15
         %99 = OpShiftRightLogical %uint %98 %uint_2
        %100 = OpLoad %v4uint %97 None
        %101 = OpVectorShuffle %v2uint %100 %100 2 3
        %102 = OpVectorShuffle %v2uint %100 %100 0 1
        %103 = OpIEqual %bool %99 %uint_2
        %104 = OpCompositeConstruct %v2bool %103 %103
        %105 = OpSelect %v2uint %104 %101 %102
        %106 = OpBitcast %v2float %105
        %107 = OpCompositeConstruct %mat4v2float %69 %81 %93 %106
               OpReturnValue %107
               OpFunctionEnd
