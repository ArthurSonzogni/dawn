; SPIR-V
; Version: 1.3
; Generator: Google Tint Compiler; 1
; Bound: 94
; Schema: 0
               OpCapability Shader
         %29 = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %f "f"
               OpExecutionMode %f LocalSize 1 1 1
               OpMemberName %m_block_tint_explicit_layout 0 "inner"
               OpName %m_block_tint_explicit_layout "m_block_tint_explicit_layout"
               OpName %counter "counter"
               OpName %i "i"
               OpName %f "f"
               OpName %l_m "l_m"
               OpName %l_m_i "l_m_i"
               OpName %start_byte_offset "start_byte_offset"
               OpDecorate %_arr_v4uint_uint_2 ArrayStride 16
               OpMemberDecorate %m_block_tint_explicit_layout 0 Offset 0
               OpDecorate %m_block_tint_explicit_layout Block
               OpDecorate %1 DescriptorSet 0
               OpDecorate %1 Binding 0
               OpDecorate %1 NonWritable
       %uint = OpTypeInt 32 0
     %v4uint = OpTypeVector %uint 4
     %uint_2 = OpConstant %uint 2
%_arr_v4uint_uint_2 = OpTypeArray %v4uint %uint_2
%m_block_tint_explicit_layout = OpTypeStruct %_arr_v4uint_uint_2
%_ptr_Uniform_m_block_tint_explicit_layout = OpTypePointer Uniform %m_block_tint_explicit_layout
          %1 = OpVariable %_ptr_Uniform_m_block_tint_explicit_layout Uniform
        %int = OpTypeInt 32 1
%_ptr_Private_int = OpTypePointer Private %int
      %int_0 = OpConstant %int 0
    %counter = OpVariable %_ptr_Private_int Private %int_0
         %13 = OpTypeFunction %int
      %int_1 = OpConstant %int 1
       %void = OpTypeVoid
         %24 = OpTypeFunction %void
     %uint_8 = OpConstant %uint 8
      %float = OpTypeFloat 32
    %v2float = OpTypeVector %float 2
%mat3v2float = OpTypeMatrix %v2float 3
     %uint_0 = OpConstant %uint 0
    %uint_16 = OpConstant %uint 16
%_ptr_Uniform_v4uint = OpTypePointer Uniform %v4uint
    %uint_15 = OpConstant %uint 15
     %v2uint = OpTypeVector %uint 2
       %bool = OpTypeBool
     %v2bool = OpTypeVector %bool 2
         %56 = OpTypeFunction %mat3v2float %uint
          %i = OpFunction %int None %13
         %14 = OpLabel
         %15 = OpLoad %int %counter None
         %16 = OpBitcast %uint %15
         %17 = OpBitcast %uint %int_1
         %19 = OpIAdd %uint %16 %17
         %20 = OpBitcast %int %19
               OpStore %counter %20 None
         %21 = OpLoad %int %counter None
               OpReturnValue %21
               OpFunctionEnd
          %f = OpFunction %void None %24
         %25 = OpLabel
         %26 = OpFunctionCall %int %i
         %27 = OpBitcast %uint %26
         %28 = OpExtInst %uint %29 UMin %27 %uint_2
         %30 = OpIMul %uint %uint_8 %28
        %l_m = OpFunctionCall %mat3v2float %36 %uint_0
         %38 = OpUDiv %uint %30 %uint_16
         %40 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %38
         %42 = OpBitwiseAnd %uint %30 %uint_15
         %44 = OpShiftRightLogical %uint %42 %uint_2
         %45 = OpLoad %v4uint %40 None
         %46 = OpVectorShuffle %v2uint %45 %45 2 3
         %48 = OpVectorShuffle %v2uint %45 %45 0 1
         %49 = OpIEqual %bool %44 %uint_2
         %52 = OpCompositeConstruct %v2bool %49 %49
         %53 = OpSelect %v2uint %52 %46 %48
      %l_m_i = OpBitcast %v2float %53
               OpReturn
               OpFunctionEnd
         %36 = OpFunction %mat3v2float None %56
%start_byte_offset = OpFunctionParameter %uint
         %57 = OpLabel
         %58 = OpUDiv %uint %start_byte_offset %uint_16
         %59 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %58
         %60 = OpBitwiseAnd %uint %start_byte_offset %uint_15
         %61 = OpShiftRightLogical %uint %60 %uint_2
         %62 = OpLoad %v4uint %59 None
         %63 = OpVectorShuffle %v2uint %62 %62 2 3
         %64 = OpVectorShuffle %v2uint %62 %62 0 1
         %65 = OpIEqual %bool %61 %uint_2
         %66 = OpCompositeConstruct %v2bool %65 %65
         %67 = OpSelect %v2uint %66 %63 %64
         %68 = OpBitcast %v2float %67
         %69 = OpIAdd %uint %uint_8 %start_byte_offset
         %70 = OpUDiv %uint %69 %uint_16
         %71 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %70
         %72 = OpBitwiseAnd %uint %69 %uint_15
         %73 = OpShiftRightLogical %uint %72 %uint_2
         %74 = OpLoad %v4uint %71 None
         %75 = OpVectorShuffle %v2uint %74 %74 2 3
         %76 = OpVectorShuffle %v2uint %74 %74 0 1
         %77 = OpIEqual %bool %73 %uint_2
         %78 = OpCompositeConstruct %v2bool %77 %77
         %79 = OpSelect %v2uint %78 %75 %76
         %80 = OpBitcast %v2float %79
         %81 = OpIAdd %uint %uint_16 %start_byte_offset
         %82 = OpUDiv %uint %81 %uint_16
         %83 = OpAccessChain %_ptr_Uniform_v4uint %1 %uint_0 %82
         %84 = OpBitwiseAnd %uint %81 %uint_15
         %85 = OpShiftRightLogical %uint %84 %uint_2
         %86 = OpLoad %v4uint %83 None
         %87 = OpVectorShuffle %v2uint %86 %86 2 3
         %88 = OpVectorShuffle %v2uint %86 %86 0 1
         %89 = OpIEqual %bool %85 %uint_2
         %90 = OpCompositeConstruct %v2bool %89 %89
         %91 = OpSelect %v2uint %90 %87 %88
         %92 = OpBitcast %v2float %91
         %93 = OpCompositeConstruct %mat3v2float %68 %80 %92
               OpReturnValue %93
               OpFunctionEnd
